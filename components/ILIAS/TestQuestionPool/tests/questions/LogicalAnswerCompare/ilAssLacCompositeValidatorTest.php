<?php

use PHPUnit\Framework\TestCase;

use function Sabre\Uri\parse;

class ilAssLacCompositeValidatorTest extends assBaseTestCase
{
    private ilAssLacCompositeValidator $validator;

    protected function setUp(): void
    {
        parent::setUp();

        $this->object_loader_mock = $this->createMock(ilAssLacQuestionProvider::class);
        $this->validator = new ilAssLacCompositeValidator($this->object_loader_mock);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_instance(): void
    {
        $this->assertInstanceOf(ilAssLacCompositeValidator::class, $this->validator);
    }

    /**
     * @dataProvider provideValidateData
     */
    public function test_validate(
        string $condition,
        array $available_answer_options,
        array $expression_types,
        array $operators,
        string $question_class = TestQuestionMockAdapter::class
    ): void {

        $question_mock = $this->createMock($question_class);

        $this->object_loader_mock
            ->expects($this->once())
            ->method('getQuestion')
            ->willReturn($question_mock);

        $question_mock
            ->expects($this->atLeastOnce())
            ->method('getAvailableAnswerOptions')
            ->willReturn($available_answer_options);

        $question_mock
            ->expects($this->once())
            ->method('getExpressionTypes')
            ->willReturn($expression_types);

        $question_mock
            ->expects($this->once())
            ->method('getOperators')
            ->willReturn($operators);

        $composite = (new ilAssLacConditionParser())->parse($condition);
        $this->validator->validate($composite);
    }

    public static function provideValidateData(): array
    {
        return [
            [
                "condition" => "Q1 = +2+",
                "available_options" => ['1', '2'],
                "expression_types" => [iQuestionCondition::NumberOfResultExpression],
                "operators" => ["="]
            ],
            [
                "condition" => "Q1[3] >= #42#",
                "available_options" => ['1', '2', '3'],
                "expression_types" => [iQuestionCondition::NumericResultExpression],
                "operators" => [">="]
            ],
            [
                "condition" => "Q1 = $2,1,3,4$",
                "available_options" => ['1', '2', '3', '4'],
                "expression_types" => [iQuestionCondition::OrderingResultExpression],
                "operators" => ["="]
            ],
            [
                "condition" => "Q1[2] = ~Hello~",
                "available_options" => [$this->createMock(assClozeGap::class)],
                "expression_types" => [iQuestionCondition::StringResultExpression],
                "operators" => ["="],
                "question_class" => assClozeTest::class
            ]
        ];
    }
}
